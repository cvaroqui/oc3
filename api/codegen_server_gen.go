// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /feed/daemon/ping)
	PostFeedDaemonPing(ctx echo.Context) error

	// (POST /feed/daemon/status)
	PostFeedDaemonStatus(ctx echo.Context) error

	// (POST /feed/object/config)
	PostFeedObjectConfig(ctx echo.Context) error

	// (POST /feed/system)
	PostFeedSystem(ctx echo.Context) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostFeedDaemonPing converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedDaemonPing(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedDaemonPing(ctx)
	return err
}

// PostFeedDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedDaemonStatus(ctx)
	return err
}

// PostFeedObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedObjectConfig(ctx)
	return err
}

// PostFeedSystem converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedSystem(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedSystem(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/feed/daemon/ping", wrapper.PostFeedDaemonPing)
	router.POST(baseURL+"/feed/daemon/status", wrapper.PostFeedDaemonStatus)
	router.POST(baseURL+"/feed/object/config", wrapper.PostFeedObjectConfig)
	router.POST(baseURL+"/feed/system", wrapper.PostFeedSystem)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
